#!/usr/bin/env bash

# Usage: align input_audio_file.flac|.wav metadata_file.json
set -euo pipefail

# Define paths for dependencies
AAA_EXE="/home/harry/auto_audio_align/aaa.exe"
AAA_EXE_FALLBACK="/home/harry/Desktop/RF-Captures/aaa.exe"

print_usage() {
  echo "Usage: $0 <input_audio_file.flac|.wav> <metadata_file.json>"
  exit 1
}

# Verify exactly two arguments are provided.
if [[ $# -ne 2 ]]; then
  print_usage
fi

arg1="$1"
arg2="$2"

# Auto-detect and assign audio_file & metadata_file regardless of order.
case "${arg1##*.}" in
  json)
    metadata_file="$arg1"
    audio_file="$arg2"
    ;;
  flac|wav)
    audio_file="$arg1"
    metadata_file="$arg2"
    ;;
  *)
    # maybe arg2 is JSON?
    case "${arg2##*.}" in
      json)
        metadata_file="$arg2"
        audio_file="$arg1"
        ;;
      flac|wav)
        audio_file="$arg2"
        metadata_file="$arg1"
        ;;
      *)
        echo "Error: Could not identify an audio file (.flac/.wav) and a JSON file among arguments."
        print_usage
        ;;
    esac
    ;;
esac

# Ensure the input files exist.
if [[ ! -f "$audio_file" ]]; then
  echo "Error: Audio file '$audio_file' not found."
  exit 1
fi
if [[ ! -f "$metadata_file" ]]; then
  echo "Error: Metadata file '$metadata_file' not found."
  exit 1
fi

# Confirm extensions again (just in case someone passed e.g. .txt)
ext="${audio_file##*.}"
if [[ "$ext" != "flac" && "$ext" != "wav" ]]; then
  echo "Error: '$audio_file' is not a .flac or .wav file."
  exit 1
fi

# Check for dependencies
if ! command -v ffmpeg >/dev/null 2>&1; then
  echo "Error: ffmpeg is required but not installed."
  exit 1
fi

if ! command -v ffprobe >/dev/null 2>&1; then
  echo "Error: ffprobe is required but not installed."
  exit 1
fi

if ! command -v mono >/dev/null 2>&1; then
  echo "Error: mono is required but not installed."
  exit 1
fi

# Check for aaa.exe
if [[ -f "$AAA_EXE" ]]; then
  AAA_PATH="$AAA_EXE"
elif [[ -f "$AAA_EXE_FALLBACK" ]]; then
  AAA_PATH="$AAA_EXE_FALLBACK"
else
  echo "Error: aaa.exe not found in expected locations:"
  echo "  - $AAA_EXE"
  echo "  - $AAA_EXE_FALLBACK"
  exit 1
fi

# Determine the sample rate using ffprobe.
samplerate=$(ffprobe -v error -select_streams a:0 \
  -show_entries stream=sample_rate \
  -of default=noprint_wrappers=1:nokey=1 \
  "$audio_file" | tr -d '\r\n')

echo "Detected sample rate: ${samplerate} Hz"

# Prepare output path
base=$(basename "$audio_file")
name="${base%.*}"
output="${name}_aligned.flac"

if [[ "$samplerate" -eq 48000 ]]; then
  echo "Source is 48000 Hz. Using 48000 Hz parameters."

  ffmpeg -i "$audio_file" \
    -filter_complex "channelmap=map=FL-FL|FR-FR" \
    -f s24le -ac 2 -ar 48000 - | \
  mono "$AAA_PATH" stream-align \
    --sample-size-bytes 6 \
    --stream-sample-rate-hz 48000 \
    --json "$metadata_file" \
    --rf-video-sample-rate-hz 40000000 | \
  ffmpeg -f s24le -ar 48000 -ac 2 -i - \
    -sample_fmt s32 "$output"

else
  echo "Source is assumed to be 46875 Hz. Using 46875 Hz for alignment then resampling to 48000 Hz."

  ffmpeg -i "$audio_file" \
    -filter_complex "channelmap=map=FL-FL|FR-FR" \
    -f s24le -ac 2 - | \
  mono "$AAA_PATH" stream-align \
    --sample-size-bytes 6 \
    --stream-sample-rate-hz 46875 \
    --json "$metadata_file" \
    --rf-video-sample-rate-hz 40000000 | \
  ffmpeg -f s24le -ar 46875 -ac 2 -i - \
    -af aresample=48000 \
    -sample_fmt s32 "$output"
fi

echo "Output written to '$output'"
